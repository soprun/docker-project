#!/bin/sh

log_info() {
    printf "\033[0;34m[info]\033[0m: %s\\n" "$1"
}

log_success() {
    printf "\033[0;32m[success]\033[0m: %s\\n" "$1"
}

log_warn() {
    printf "\033[0;33m[warn]\033[0m: %s\\n" "$1"
}

log_error() {
    printf "\033[0;31m[error]\033[0m: %s\\n" "$1"
}

log_title() {
    printf "\n\033[0;30m->> \033[0;32m%s\033[0m\\n" "$1"
}

error_exit() {
    log_error "$1" >&2
    exit 1
}

###
### Default environment variables
###

if [ -z $PROJECT_DIR ]; then
    # Export project working directory
    PROJECT_DIR="$(dirname $(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd))"
    export PROJECT_DIR
fi

### Load environment variables
for file in ${PROJECT_DIR}/{.env,.env.local}; do
  # shellcheck source=../.env
  [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

# export $(shell sed 's/=.*//' "${PROJECT_DIR}/.env")
# export $(shell sed 's/=.*//' "${PROJECT_DIR}/.env.local")

if [ -z $PROJECT_NAME ]; then
    error_exit "An error occurred, the value of the variable PROJECT_NAME was not loaded!"
fi

# Be very strict
# set -euo pipefail




# Fail fast with concise message when cwd does not exist
#if ! [[ -d "$PWD" ]]; then
#  error_exit "Error: The current working directory doesn't exist, cannot proceed." >&2
#fi

## Project directory
#readonly PROJECT_DIR="$(dirname $(cd -P -- "$(dirname -- "$0")" && pwd -P))"
#export PROJECT_DIR
#
## Load the shell .env files
#for file in ${PROJECT_DIR}/{docker/.env,docker/.env.local,app/.env,app/.env.local}; do
#  # shellcheck source=
#  [ -r "$file" ] && [ -f "$file" ] && source "$file"
#done
#unset file
#


#if [ -z $APP_ENV ]; then
#    error_exit "An error occurred, the value of the variable APP_ENV was not loaded!"
#fi
#
#log_info $APP_ENV
