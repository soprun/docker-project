#!/bin/bash

set -e

function output
{
  local style_start=""
  local style_end=""
  if [ "${2:-}" != "" ]; then
    case $2 in
    "success")
      style_start="\033[0;32m"
      style_end="\033[0m"
      ;;
    "error")
      style_start="\033[31;31m"
      style_end="\033[0m"
      ;;
    "info" | "warning")
      style_start="\033[33m"
      style_end="\033[39m"
      ;;
    "heading")
      style_start="\033[1;33m"
      style_end="\033[22;39m"
      ;;
    esac
  fi

  builtin echo -e "${style_start}${1}${style_end}"
}

if [ "$CI" = "true" ]; then
  output "Skipp.."
  printenv | sort
  exit 1
fi

# GITHUB_WORKSPACE
# Project directory
PROJECT_DIR="$(dirname $(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd))"

for file in ${PROJECT_DIR}/.{env,env.local}; do
  # shellcheck source=../.env
  [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

if [ ! -f "${PROJECT_DIR}/.env.local" ]; then
  output "The file was not found and a new ${file} file was created!" "warning"
  touch "${PROJECT_DIR}/.env.local"
fi

# VERSIONS
# :dev
# :prod
# :latest
# :edge

# repo:${{ github.sha }}
# repo:latest

#######################################################################
# Check environment variables
#######################################################################

output "\nCheck environment variables" "heading"

if [ -z $PROJECT_NAME ]; then
  output "\nAn error occurred, the value of the variable PROJECT_NAME was not loaded!" "error"
  # exit 1
fi

if [ -z $RELEASE_VERSION ]; then
  output "\nAn error occurred, the value of the variable RELEASE_VERSION was not loaded!" "error"
  # exit 1
fi

if [ -z $COMMIT_SHA ]; then
  output "\nAn error occurred, the value of the variable COMMIT_SHA was not loaded!" "error"
  # exit 1
fi

#if [ -z $RELEASE_DATE ]; then
#  output "\nAn error occurred, the value of the variable RELEASE_DATE was not loaded!" "error"
#  exit 1
#fi
#
#if [ -z $RELEASE_ENV ]; then
#  output "\nAn error occurred, the value of the variable RELEASE_ENV was not loaded!" "error"
#  exit 1
#fi
#
#if [ -z $RELEASE_NAME ]; then
#  output "\nAn error occurred, the value of the variable RELEASE_NAME was not loaded!" "error"
#  exit 1
#fi
#
#
#
#if [ -z $BUILD_ID ]; then
#  output "\nAn error occurred, the value of the variable BUILD_ID was not loaded!" "error"
#  exit 1
#fi

# Check that Git is installed.
if ! command -v git >/dev/null 2>&1; then
  output "Git will be needed." "error"
  exit 1
fi

output "\nGit variables" "heading"

#GIT_VERSION=$(git describe --tags --abbrev=0)
#GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
#GIT_COMMIT_SHA=$(git rev-parse HEAD)
#GIT_COMMIT_ID=$(git rev-parse --short=7 HEAD)
#
#output "Project name: ${PROJECT_NAME}"
#output "Version: ${GIT_VERSION}"
#output "Branch: ${GIT_BRANCH}"
#output "Commit ID: ${GIT_COMMIT_ID}"
#output "Commit SHA: ${GIT_COMMIT_SHA}"

# path: github.action_path
# build_id: github.job
# commit_sha: github.sha
# ref: github.ref

#
# The branch or tag ref that triggered the workflow run.
# For branches this in the format refs/heads/<branch_name>,
# and for tags it is refs/tags/<tag_name>.

#git show-ref --quiet --verify -- "refs/heads/$headname" || echo "$headname is not a valid branch"

# GITHUB_SHA (commit SHA)
# GITHUB_REF (Git ref)

GITHUB_REF="refs/heads/master"
GITHUB_REF="refs/heads/develop"
#GITHUB_REF="refs/tags/v1.1.1"

VERSION="edge"

## Strip git ref prefix from version
# VERSION=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')

if [[ $GITHUB_REF == refs/tags/* ]]; then
  VERSION=${GITHUB_REF#refs/tags/v}
fi

TAG="${IMAGE_PHP_NAME}:${VERSION}"

if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
  TAG="$TAG,${IMAGE_PHP_NAME}:latest"
fi

echo $TAG

exit 0

## Strip git ref prefix from version
#VERSION=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')
#
## Strip "v" prefix from tag name
#[[ "$GITHUB_REF" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
## Use Docker `latest` tag convention
#[[ "$VERSION" = "master" ]] && VERSION=latest

# Check that Git is installed.
#if ! command -v git >/dev/null 2>&1; then
#fi

output "$IMAGE_PHP_NAME:$VERSION"

exit 0

build()
{
  local file="${1}"
  local target="${2}"
  local tag="${3}"

  if [ ! -f "$file" ]; then
    output "An error occurred, file '${file}' exists!" "error"
  fi

  docker buildx build . \
    --file "$file" \
    --target "$target" \
    --tag "$tag"
}

build "${PROJECT_DIR}/${IMAGE_PHP_FILE}" "dev" "dev"
