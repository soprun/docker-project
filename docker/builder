#!/bin/bash

set -e

#printenv | sort
#exit 1

function output
{
  local style_start=""
  local style_end=""
  if [ "${2:-}" != "" ]; then
    case $2 in
    "success")
      style_start="\033[0;32m"
      style_end="\033[0m"
      ;;
    "error")
      style_start="\033[31;31m"
      style_end="\033[0m"
      ;;
    "info" | "warning")
      style_start="\033[33m"
      style_end="\033[39m"
      ;;
    "heading")
      style_start="\033[1;33m"
      style_end="\033[22;39m"
      ;;
    esac
  fi

  builtin echo -e "${style_start}${1}${style_end}"
}

## Project directory
#PROJECT_DIR="$(dirname $(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd))"
#
#output "\nLoad environment variables" "heading"
#
#for file in ${PROJECT_DIR}/.{env,env.local}; do
#  # shellcheck source=../.env
#  [ -r "$file" ] && [ -f "$file" ] && source "$file"
#done
#unset file
#
#output "Load successfully!" "success"

#######################################################################
# Check environment variables
#######################################################################

#output "\nCheck environment variables" "heading"

if [ -z $RELEASE_DATE ]; then
  output "\nAn error occurred, the value of the variable RELEASE_DATE was not loaded!" "error"
  exit 1
fi

if [ -z $RELEASE_ENV ]; then
  output "\nAn error occurred, the value of the variable RELEASE_ENV was not loaded!" "error"
  exit 1
fi

if [ -z $RELEASE_NAME ]; then
  output "\nAn error occurred, the value of the variable RELEASE_NAME was not loaded!" "error"
  exit 1
fi

if [ -z $RELEASE_TAG ]; then
  output "\nAn error occurred, the value of the variable RELEASE_TAG was not loaded!" "error"
  exit 1
fi

if [ -z $COMMIT_SHA ]; then
  output "\nAn error occurred, the value of the variable COMMIT_SHA was not loaded!" "error"
  exit 1
fi

if [ -z $BUILD_ID ]; then
  output "\nAn error occurred, the value of the variable BUILD_ID was not loaded!" "error"
  exit 1
fi

# Check that Git is installed.
if ! command -v git >/dev/null 2>&1; then
  output "Git will be needed." "error"
  exit 1
fi

exit 0

output "\nGit variables" "heading"

GIT_VERSION=$(git describe --tags --abbrev=0)
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
GIT_COMMIT_SHA=$(git rev-parse HEAD)
GIT_COMMIT_ID=$(git rev-parse --short=7 HEAD)

output "Project name: ${PROJECT_NAME}"
output "Version: ${GIT_VERSION}"
output "Branch: ${GIT_BRANCH}"
output "Commit ID: ${GIT_COMMIT_ID}"
output "Commit SHA: ${GIT_COMMIT_SHA}"

echo $PHP_IMAGE_NAME
echo $PHP_IMAGE_FILE

# todo: перенести запятую

echo docker buildx build \
  --push \
  --file "${PHP_IMAGE_FILE}" \
  --target "dev" \
  --tag "${PHP_IMAGE_NAME}:dev-${GIT_VERSION}" \
  .
