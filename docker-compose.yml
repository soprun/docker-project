version: "3.8"

x-logging:
  &default-logging
  logging:
    driver: ${LOGGING_DRIVER}
    options:
      max-size: ${LOGGING_OPTIONS_MAX_SIZE}
      max-file: ${LOGGING_OPTIONS_MAX_FILE}

#x-network:
#  &default-network
#  networks:
#    - back-tier

x-php:
  &default-php
  volumes:
    - ./:/app:rw,consistent
    - ~/.composer/cache:/composer/cache:rw,cached
  depends_on:
    - postgres
    - memcached
    - redis
    - rabbitmq

volumes:
  rabbitmq:
  postgres:
  composer:

networks:
  frontend-tier:
    driver: bridge
  backend-tier:
    driver: bridge

# https://github.com/docker/compose/issues/4675
services:
  nginx:
    image: soprun/sandbox-nginx:latest
    container_name: nginx
    <<: *default-logging
    depends_on:
      - php
    ports:
      - 80:80
      - 443:443

  php:
    image: soprun/sandbox-php:latest
    container_name: php
    privileged: true
    <<: *default-php
    <<: *default-logging

  php-cli:
    image: soprun/sandbox-php-cli:latest
    container_name: php-cli
    tty: true
    <<: *default-php
    <<: *default-logging

  php-supervisor:
    image: soprun/sandbox-php-cli:latest
    container_name: php-supervisor
    <<: *default-php
    <<: *default-logging

  postgres:
    image: postgres:latest
    container_name: postgres
    <<: *default-logging
    volumes:
      # - ./docker/postgres/dump.sql:/docker-entrypoint-initdb.d/dump.sql
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB
      - POSTGRES_USERNAME
      - POSTGRES_PASSWORD

  rabbitmq:
    image: rabbitmq:3.8.5-alpine
    container_name: rabbitmq
    <<: *default-logging
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}

  rabbitmq-management:
    image: rabbitmq:3.8.5-management-alpine
    container_name: rabbitmq-management
    <<: *default-logging
    depends_on:
      - rabbitmq

  memcached:
    image: memcached:latest
    hostname: ${MEMCACHED_HOST}
    container_name: memcached
    <<: *default-logging

  redis:
    image: redis:latest
    hostname: ${REDIS_HOST}
    container_name: redis
    <<: *default-logging

  vault:
    image: vault:latest
    container_name: vault
    <<: *default-logging
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - SKIP_SETCAP=true
      - SKIP_CHOWN=true
    ports:
      - 8200:8200
    cap_add:
      - IPC_LOCK
    command: server
    volumes:
      - ./docker/vault/config:/vault/config
      - ./docker/vault/file:/vault/file
