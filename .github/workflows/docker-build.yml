name: Docker build CI

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - develop
    # paths:
    #   - '.github/**'
    #   - 'docker/**'
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_CONTEXT: ${{ toJson(github) }}

  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

  PHP_IMAGE_NAME: soprun/docker-project-php
  PHP_IMAGE_FILE: ./docker/php/Dockerfile

  NGINX_IMAGE_NAME: soprun/docker-project-nginx
  NGINX_IMAGE_FILE: ./docker/nginx/Dockerfile

  PROJECT_NAME: docker-project
  PROJECT_RELEASE: ""

jobs:
  setup:
    name: Setup stage
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup release
        id: release
        run: |
          RELEASE_NAME=$(printf "release-%s\n" "$(date +'%Y-%m-%d')")
          echo "::set-output name=RELEASE_NAME::$RELEASE_NAME"

          # Strip git ref prefix from version
          RELEASE_VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && $RELEASE_VERSION=$(echo $RELEASE_VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$RELEASE_VERSION" == "master" ] && RELEASE_VERSION=latest

          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
          echo "::set-output name=RELEASE_TAG::$RELEASE_VERSION"
          # latest, develop, v1.1.2

      - name: View release date
        run: |
          echo "RELEASE_NAME: ${{ steps.release.outputs.RELEASE_NAME }}"
          echo "RELEASE_TAG: ${{ steps.release.outputs.RELEASE_TAG }}"

      # - name: Run build script
      #   run: ./docker/build
      #   shell: bash

  build:
    needs: setup
    name: Build stage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        id: build
        run: |
          echo "The build stage..."
          echo "RELEASE_TAG: ${{ steps.release.outputs.RELEASE_TAG }}"

  test:
    needs: build
    name: Test stage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - run: echo "The test stage..."

  release:
    needs: test
    name: Release stage
    if: contains(github.ref, 'master')
    runs-on: ubuntu-latest
    steps:
      - run: echo "The release stage..."

  deploy_prod:
    needs: release
    name: Deploy stage
    if: contains(github.ref, 'master')
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploy to production server"