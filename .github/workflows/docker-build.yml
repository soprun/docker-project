name: Docker build image

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - develop
    paths:
      - 'docker/**'
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_CONTEXT: ${{ toJson(github) }}

  SERVER: production

  PHP_IMAGE_NAME: soprun/docker-project-php
  PHP_IMAGE_FILE: ./docker/php/Dockerfile

  NGINX_IMAGE_NAME: soprun/docker-project-nginx
  NGINX_IMAGE_FILE: ./docker/nginx/Dockerfile

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

  build:
    needs: setup
    name: Build image (ENV ${{ matrix.env }})
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - env: "dev"
            debug: true
          - env: "prod"
            debug: false
    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Docker Login
        uses: docker/login-action@v1.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build image
        env:
          APP_ENV: ${{ matrix.env }}
          APP_DEBUG: ${{ matrix.debug }}
        run: |
          IMAGE_ID=hub.docker.com/repository/docker/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          COMMIT_SHA=$(echo "${{ github.sha }}")

          echo VERSION=$VERSION
          echo COMMIT_SHA=$COMMIT_SHA
          echo IMAGE_ID=$IMAGE_ID
          echo PHP_IMAGE_NAME=$PHP_IMAGE_NAME
          echo PHP_IMAGE_FILE=$PHP_IMAGE_FILE
          echo NGINX_IMAGE_NAME=$NGINX_IMAGE_NAME
          echo NGINX_IMAGE_FILE=$NGINX_IMAGE_FILE

          echo "======================================="
          echo "$GITHUB_CONTEXT"
          # echo ${{ github.event.pull_request.title }}

          docker build . \
          --file "$PHP_IMAGE_FILE" \
          --tag "$PHP_IMAGE_NAME:dev-$VERSION" \
          --target "dev" \
          --label "project.env=dev" \
          --label "project.version=$VERSION" \
          --label "project.commit_sha=$COMMIT_SHA"

          docker build . \
          --file "$PHP_IMAGE_FILE" \
          --tag "$PHP_IMAGE_NAME:$VERSION" \
          --tag "$PHP_IMAGE_NAME:prod-$VERSION" \
          --target "prod" \
          --label "project.env=prod" \
          --label "project.version=$VERSION" \
          --label "project.commit_sha=$COMMIT_SHA"

          docker build . \
          --file "$NGINX_IMAGE_FILE" \
          --tag "$NGINX_IMAGE_NAME:$VERSION" \
          --label "project.version=$VERSION" \
          --label "project.commit_sha=$COMMIT_SHA"

          # docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
          # docker tag $IMAGE_NAME $IMAGE_ID:$VERSION

          docker push $PHP_IMAGE_NAME
          docker push $NGINX_IMAGE_NAME
          # docker push $IMAGE_NAME:$VERSION
          # docker push $IMAGE_NAME:dev-$VERSION
          # docker push $IMAGE_NAME:prod-$VERSION

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Run tests
  #        run: |
  #          if [ -f docker-compose.test.yml ]; then
  #            docker-compose --file docker-compose.test.yml build
  #            docker-compose --file docker-compose.test.yml run sut
  #          else
  #            docker build . --file $IMAGE_FILE
  #          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
