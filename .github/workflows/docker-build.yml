name: Docker build image

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - develop
    # paths:
    #   - '.github/**'
    #   - 'docker/**'
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # GITHUB_CONTEXT: ${{ toJson(github) }}

  PHP_IMAGE_NAME: soprun/docker-project-php
  PHP_IMAGE_FILE: ./docker/php/Dockerfile

  NGINX_IMAGE_NAME: soprun/docker-project-nginx
  NGINX_IMAGE_FILE: ./docker/nginx/Dockerfile

jobs:
  build:
    name: Build image (${{ matrix.env }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - env: "dev"
          - env: "prod"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Setup build
        id: release
        run: |
          RELEASE_NAME=$(printf "release-%s\n" "$(date +'%Y-%m-%d')")
          echo "::set-output name=RELEASE_NAME::$RELEASE_NAME"

          RELEASE_DATE=$(date +'%Y-%m-%d')
          echo "::set-output name=RELEASE_DATE::$RELEASE_DATE"

          # Strip git ref prefix from version
          RELEASE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && RELEASE_TAG=$(echo $RELEASE_TAG | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$RELEASE_TAG" == "master" ] && RELEASE_TAG=latest

          echo "::set-output name=RELEASE_TAG::$RELEASE_TAG"
          # latest, develop, v1.1.2

      - name: Docker Login
        uses: docker/login-action@v1.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Run builder shell-script
        run: ./docker/builder
        shell: bash

      - name: Build image (${{ matrix.env }})
        id: build
        env:
          RELEASE_ENV: ${{ matrix.env }}
          RELEASE_NAME: ${{ steps.release.outputs.RELEASE_NAME }}
          RELEASE_DATE: ${{ steps.release.outputs.RELEASE_DATE }}
          RELEASE_TAG: ${{ steps.release.outputs.RELEASE_TAG }}
          COMMIT_SHA: $(echo "${{ github.sha }}")
          BUILD_ID: $(echo "${{ github.job }}")
        run: |
          echo "::debug::RELEASE_ENV: $RELEASE_ENV"
          echo "::debug::RELEASE_NAME: $RELEASE_NAME"
          echo "::debug::RELEASE_DATE: $RELEASE_DATE"
          echo "::debug::RELEASE_TAG: $RELEASE_TAG"
          echo "::debug::COMMIT_SHA: $COMMIT_SHA"
          echo "::debug::BUILD_ID: $BUILD_ID"

          docker build . \
          --file "$PHP_IMAGE_FILE" \
          --tag "$PHP_IMAGE_NAME:$RELEASE_ENV-$RELEASE_TAG" \
          --target "$RELEASE_ENV" \
          --label "project.release=$RELEASE_NAME" \
          --label "project.release_date=$RELEASE_DATE" \
          --label "project.commit_sha=$COMMIT_SHA" \
          --label "project.build_id=$BUILD_ID" \
          --label "project.env=$RELEASE_ENV" \
          --label "project.tag=$RELEASE_TAG"

          docker build . \
          --file "$NGINX_IMAGE_FILE" \
          --tag "$NGINX_IMAGE_NAME:$RELEASE_ENV-$RELEASE_TAG" \
          --label "project.release=$RELEASE_NAME" \
          --label "project.release_date=$RELEASE_DATE" \
          --label "project.commit_sha=$COMMIT_SHA" \
          --label "project.build_id=$BUILD_ID" \
          --label "project.env=$RELEASE_ENV" \
          --label "project.tag=$RELEASE_TAG"

          if [ "$RELEASE_ENV" == "prod" ] && [ "$RELEASE_TAG" == "latest"  ]; then
            docker tag "$PHP_IMAGE_NAME:$RELEASE_ENV-$RELEASE_TAG" $PHP_IMAGE_NAME:latest
            docker tag "$NGINX_IMAGE_NAME:$RELEASE_ENV-$RELEASE_TAG" $NGINX_IMAGE_NAME:latest
          fi

          docker push $PHP_IMAGE_NAME
          docker push $NGINX_IMAGE_NAME

  test:
    needs: build
    name: Test stage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - run: echo "The test stage..."

  release:
    needs: test
    name: Release stage
    if: contains(github.ref, 'master')
    runs-on: ubuntu-latest
    steps:
      - run: echo "The release stage..."

  deploy:
    needs: release
    name: Deploy stage
    if: contains(github.ref, 'master')
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploy to production server"
