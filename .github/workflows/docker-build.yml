# https://www.docker.com/blog/docker-github-actions/
# https://github.com/metcalfc/docker-action-examples/tree/main/.github/workflows

name: Docker build image
on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - develop
    # paths:
    #   - '.github/**'
    #   - 'docker/**'
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # GITHUB_CONTEXT: ${{ toJson(github) }}

  IMAGE_PHP_NAME: soprun/docker-project-php
  IMAGE_PHP_FILE: ./docker/php/Dockerfile
  IMAGE_NGINX_NAME: soprun/docker-project-nginx
  IMAGE_NGINX_FILE: ./docker/nginx/Dockerfile

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKER_REGISTRY_URL: hub.docker.com

      - name: Setup build
        if: success()
        id: release
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo ::set-output name=version::${VERSION}

          echo "IMAGE_PHP_NAME: ${{ env.IMAGE_PHP_NAME }}"
          echo "IMAGE_PHP_FILE: ${{ env.IMAGE_PHP_FILE }}"
          echo "${{ env.IMAGE_PHP_NAME }}:dev-${{ steps.prep.outputs.version }}"

      - name: "Build image: dev"
        if: success()
        id: build_php_dev
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ env.IMAGE_PHP_FILE }}
          push: true
          target: dev
          tags: |
            ${{ env.IMAGE_PHP_NAME }}:dev-${{ steps.prep.outputs.version }}
          cache-from: |
            ${{ env.IMAGE_PHP_NAME }}:cache

      - name: "Build image: prod"
        if: success()
        id: build_php_prod
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ env.IMAGE_PHP_FILE }}
          push: true
          target: prod
          tags: |
            ${{ env.IMAGE_PHP_NAME }}:prod-${{ steps.prep.outputs.version }}
            ${{ env.IMAGE_PHP_NAME }}:latest
          cache-from: |
            ${{ env.IMAGE_PHP_NAME }}:cache


      # - name: Image digest
      #   run: echo ${{ steps.build_php_image.outputs.digest }}

#      - name: "Build image: PHP prod"
#        if: success()
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: ${{ env.IMAGE_PHP_FILE }}
#          push: true
#          target: prod
#          tags: |
#            "${{ env.IMAGE_PHP_NAME }}:prod-${{ steps.prep.outputs.version }}"
#            "${{ env.IMAGE_PHP_NAME }}:latest
